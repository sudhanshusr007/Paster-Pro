#include <iostream>
#include <string>
#include <vector>

using namespace std;

bool isValidSegment(const string& segment) {
if (segment.empty() || (segment.size() > 1 && segment[0] == '0') || stoi(segment) > 255) {
return false;
}
return true;
}

void generateIPAddresses(const string& s, int startIndex, int segments, string current, vector<string>& result) {
if (segments == 4) {
if (startIndex == s.size()) {
result.push_back(current);
}
return;
}

for (int i = 1; i <= 3; ++i) {
if (startIndex + i <= s.size()) {
string segment = s.substr(startIndex, i);
if (isValidSegment(segment)) {
string newCurrent = current + (segments == 0 ? "" : ".") + segment;
generateIPAddresses(s, startIndex + i, segments + 1, newCurrent, result);
}
}
}
}

vector<string> restoreIpAddresses(const string& s) {
vector<string> result;
generateIPAddresses(s, 0, 0, "", result);
return result;
}

int main() {
string digits;
cout << "Enter the string of digits: ";
cin >> digits;

vector<string> ipAddresses = restoreIpAddresses(digits);

if (ipAddresses.empty()) {
cout << "No valid IP addresses found." << endl;
} else {
    cout << "Possible IP addresses:" << endl;
for (const string& ipAddress : ipAddresses) {
cout << ipAddress << endl;
}
}

return 0;
}